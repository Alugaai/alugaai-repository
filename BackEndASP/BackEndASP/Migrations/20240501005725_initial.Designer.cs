// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackEndASP.Migrations
{
    [DbContext(typeof(SystemDbContext))]
    [Migration("20240501005725_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackEndASP.Entities.PropertyStudentLikes", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "PropertyId");

                    b.HasIndex("PropertyId");

                    b.ToTable("StudentPropertiesLikes");

                    b.HasData(
                        new
                        {
                            StudentId = "5393923e-69e7-4439-ae9b-2482eb96b68b",
                            PropertyId = 2
                        },
                        new
                        {
                            StudentId = "6880ac66-b5fc-4593-a1b9-f55de657790f",
                            PropertyId = 2
                        });
                });

            modelBuilder.Entity("BackEndASP.Entities.UserConnection", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OtherStudentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentId", "OtherStudentId");

                    b.HasIndex("OtherStudentId");

                    b.ToTable("UserConnections");
                });

            modelBuilder.Entity("Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeComplement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Buildings");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Building");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("ImageData64")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1a9ccd1f-4180-4d62-834a-db1ddc6c797b",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "41135ae2-9320-4dd2-b975-4a6959c32b29",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "6880ac66-b5fc-4593-a1b9-f55de657790f",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "5393923e-69e7-4439-ae9b-2482eb96b68b",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Moment")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserIdWhoSendNotification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("BirthDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId")
                        .IsUnique()
                        .HasFilter("[ImageId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = "1a9ccd1f-4180-4d62-834a-db1ddc6c797b",
                            AccessFailedCount = 0,
                            BirthDate = new DateTimeOffset(new DateTime(2024, 4, 30, 21, 57, 17, 496, DateTimeKind.Unspecified).AddTicks(7007), new TimeSpan(0, -3, 0, 0, 0)),
                            ConcurrencyStamp = "9ce4962c-a10a-4aa3-b0f1-cd9a7ea31a6f",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 1, 0, 57, 17, 422, DateTimeKind.Unspecified).AddTicks(6379), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPWvleBYA+KjhURcUSuITZdiDX0+BDkqUjOBQoGCKo1wf+lysWdyN8ZX0vXJMuzqdg==",
                            PhoneNumber = "999999999",
                            PhoneNumberConfirmed = true,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "3a976124-6507-47bd-9da1-8c9de53ffc27",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("College", b =>
                {
                    b.HasBaseType("Building");

                    b.HasDiscriminator().HasValue("College");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Rodovia Senador José Ermírio de Moraes",
                            District = "Sorocaba",
                            HomeComplement = "",
                            Lat = "-23.469645838524144",
                            Long = "-47.42976187034831",
                            Name = "FACENS",
                            Neighborhood = "Iporanga",
                            Number = "",
                            State = "SP"
                        });
                });

            modelBuilder.Entity("Property", b =>
                {
                    b.HasBaseType("Building");

                    b.Property<string>("Bathrooms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bedrooms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasIndex("OwnerId");

                    b.HasDiscriminator().HasValue("Property");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Address = "Rua Achiles Audi",
                            District = "Cerquilho",
                            HomeComplement = "Casa",
                            Lat = "-23.1723808873683",
                            Long = "-47.74702041600901",
                            Name = "Casa de aluguel",
                            Neighborhood = "Centro",
                            Number = "1054",
                            State = "SP",
                            Bathrooms = "2",
                            Bedrooms = "3",
                            Description = "Excelente casa, localizada em um excelente lugar, 2 banheiros sendo 1 suite, tres quartos, sala, cozinha e garagem que cabe 3 carros tranquilamente",
                            OwnerId = "41135ae2-9320-4dd2-b975-4a6959c32b29",
                            Price = 1200.0
                        });
                });

            modelBuilder.Entity("BackEndASP.Entities.Owner", b =>
                {
                    b.HasBaseType("User");

                    b.HasDiscriminator().HasValue("Owner");

                    b.HasData(
                        new
                        {
                            Id = "41135ae2-9320-4dd2-b975-4a6959c32b29",
                            AccessFailedCount = 0,
                            BirthDate = new DateTimeOffset(new DateTime(2024, 4, 30, 21, 57, 17, 561, DateTimeKind.Unspecified).AddTicks(1081), new TimeSpan(0, -3, 0, 0, 0)),
                            ConcurrencyStamp = "6eb3ba07-4b8e-4938-b93f-34d0a70fe293",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 1, 0, 57, 17, 496, DateTimeKind.Unspecified).AddTicks(7446), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "owner@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OWNER@GMAIL.COM",
                            NormalizedUserName = "OWNER",
                            PasswordHash = "AQAAAAIAAYagAAAAEJR3Hwuom34h8PfJjYgN6o/yiLDEuLV5nyRSidS0vZPHTfeg7scV9pC3SdGfLhrTiA==",
                            PhoneNumber = "999999999",
                            PhoneNumberConfirmed = true,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "8cdd432c-0d1d-4974-90d4-ab03ef483611",
                            TwoFactorEnabled = false,
                            UserName = "Owner"
                        });
                });

            modelBuilder.Entity("Student", b =>
                {
                    b.HasBaseType("User");

                    b.Property<int?>("CollegeId")
                        .HasColumnType("int");

                    b.Property<string>("Hobbies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdsPersonsIConnect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PendentsConnectionsId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Personalities")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CollegeId");

                    b.HasDiscriminator().HasValue("Student");

                    b.HasData(
                        new
                        {
                            Id = "6880ac66-b5fc-4593-a1b9-f55de657790f",
                            AccessFailedCount = 0,
                            BirthDate = new DateTimeOffset(new DateTime(2024, 4, 30, 21, 57, 17, 626, DateTimeKind.Unspecified).AddTicks(2254), new TimeSpan(0, -3, 0, 0, 0)),
                            ConcurrencyStamp = "fc1acada-ba43-469d-a67c-e7081815049d",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 1, 0, 57, 17, 561, DateTimeKind.Unspecified).AddTicks(1452), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "student@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@GMAIL.COM",
                            NormalizedUserName = "STUDENT",
                            PasswordHash = "AQAAAAIAAYagAAAAEPAOhitn7mQ/2dhkBY+ETcPeV26lloqcNmgp6BPg1tWgtchNTMF5vRDz3/YG9SphxQ==",
                            PhoneNumber = "999999999",
                            PhoneNumberConfirmed = true,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "ffe0fe2d-0977-4491-9955-7d10389926e4",
                            TwoFactorEnabled = false,
                            UserName = "Student",
                            CollegeId = 1,
                            Hobbies = "[]",
                            IdsPersonsIConnect = "[]",
                            PendentsConnectionsId = "[]",
                            Personalities = "[]"
                        },
                        new
                        {
                            Id = "5393923e-69e7-4439-ae9b-2482eb96b68b",
                            AccessFailedCount = 0,
                            BirthDate = new DateTimeOffset(new DateTime(2024, 4, 30, 21, 57, 17, 687, DateTimeKind.Unspecified).AddTicks(2176), new TimeSpan(0, -3, 0, 0, 0)),
                            ConcurrencyStamp = "a75f0483-717d-4a21-a75e-913345ef6018",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 5, 1, 0, 57, 17, 626, DateTimeKind.Unspecified).AddTicks(2924), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "joao@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOAO@GMAIL.COM",
                            NormalizedUserName = "JOAO",
                            PasswordHash = "AQAAAAIAAYagAAAAEOSJKPozSFBKY/A6Mri/YM3vEEt6CVDGDCJzI1VcKwziYvOXx+M7hNHsENAr9wBshA==",
                            PhoneNumber = "999999999",
                            PhoneNumberConfirmed = true,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "ec79b853-3e93-499e-a36c-08886d1e7c04",
                            TwoFactorEnabled = false,
                            UserName = "Joao",
                            CollegeId = 1,
                            Hobbies = "[\"League of Legends\",\"Pop\",\"Carros\"]",
                            IdsPersonsIConnect = "[]",
                            PendentsConnectionsId = "[]",
                            Personalities = "[\"Timido\",\"Quieto\",\"Amigavel\"]"
                        });
                });

            modelBuilder.Entity("BackEndASP.Entities.PropertyStudentLikes", b =>
                {
                    b.HasOne("Property", "Property")
                        .WithMany("StudentLikes")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Student", "Student")
                        .WithMany("PropertiesLikes")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BackEndASP.Entities.UserConnection", b =>
                {
                    b.HasOne("Student", "OtherStudent")
                        .WithMany()
                        .HasForeignKey("OtherStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Student", "Student")
                        .WithMany("Connections")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OtherStudent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Image", b =>
                {
                    b.HasOne("Building", "Building")
                        .WithMany("Images")
                        .HasForeignKey("BuildingId");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Notification", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.HasOne("Image", "Image")
                        .WithOne("User")
                        .HasForeignKey("User", "ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Property", b =>
                {
                    b.HasOne("BackEndASP.Entities.Owner", "Owner")
                        .WithMany("Properties")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Student", b =>
                {
                    b.HasOne("College", "College")
                        .WithMany("Students")
                        .HasForeignKey("CollegeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("College");
                });

            modelBuilder.Entity("Building", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Image", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("College", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Property", b =>
                {
                    b.Navigation("StudentLikes");
                });

            modelBuilder.Entity("BackEndASP.Entities.Owner", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Student", b =>
                {
                    b.Navigation("Connections");

                    b.Navigation("PropertiesLikes");
                });
#pragma warning restore 612, 618
        }
    }
}
