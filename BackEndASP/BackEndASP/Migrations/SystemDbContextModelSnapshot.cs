// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackEndASP.Migrations
{
    [DbContext(typeof(SystemDbContext))]
    partial class SystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackEndASP.Entities.PropertyStudentLikes", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "PropertyId");

                    b.HasIndex("PropertyId");

                    b.ToTable("StudentPropertiesLikes");

                    b.HasData(
                        new
                        {
                            StudentId = "2f426abc-de8e-4a62-8b01-f706a19b2888",
                            PropertyId = 2
                        },
                        new
                        {
                            StudentId = "6a9131c2-be9d-461e-a1af-1535072cd2d3",
                            PropertyId = 2
                        });
                });

            modelBuilder.Entity("BackEndASP.Entities.UserConnection", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OtherStudentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentId", "OtherStudentId");

                    b.HasIndex("OtherStudentId");

                    b.ToTable("UserConnections");
                });

            modelBuilder.Entity("BackEndASP.Entities.UserNotifications", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeComplement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Buildings");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Building");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b3e25661-a669-4ae5-8152-ecfb06549d3f",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "9f97f8e2-3e2f-4bf6-8d4d-2dcd7a4220a3",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "6a9131c2-be9d-461e-a1af-1535072cd2d3",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "2f426abc-de8e-4a62-8b01-f706a19b2888",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Moment")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("BirthDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId")
                        .IsUnique()
                        .HasFilter("[ImageId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = "b3e25661-a669-4ae5-8152-ecfb06549d3f",
                            AccessFailedCount = 0,
                            BirthDate = new DateTimeOffset(new DateTime(2024, 4, 12, 12, 33, 57, 891, DateTimeKind.Unspecified).AddTicks(3318), new TimeSpan(0, -3, 0, 0, 0)),
                            ConcurrencyStamp = "c92c94a4-4fa9-4620-b1dd-5515126b5c30",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 4, 12, 15, 33, 57, 824, DateTimeKind.Unspecified).AddTicks(1457), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAENkwPJMLQLFP2/KGlHdZYiZGn5p0goZ6O2nYFCTSKXtNdh+ptH7xlWhujOv69tJjsQ==",
                            PhoneNumber = "999999999",
                            PhoneNumberConfirmed = true,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "a3f105b9-8e75-4fdb-ac97-5f855eb935fc",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("College", b =>
                {
                    b.HasBaseType("Building");

                    b.HasDiscriminator().HasValue("College");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Rodovia Senador José Ermírio de Moraes",
                            District = "Sorocaba",
                            HomeComplement = "",
                            Lat = "-23.469645838524144",
                            Long = "-47.42976187034831",
                            Name = "FACENS",
                            Neighborhood = "Iporanga",
                            Number = "",
                            State = "SP"
                        });
                });

            modelBuilder.Entity("Property", b =>
                {
                    b.HasBaseType("Building");

                    b.Property<string>("Bathrooms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bedrooms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasIndex("OwnerId");

                    b.HasDiscriminator().HasValue("Property");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Address = "Rua Achiles Audi",
                            District = "Cerquilho",
                            HomeComplement = "Casa",
                            Lat = "-23.1723808873683",
                            Long = "-47.74702041600901",
                            Name = "Casa de aluguel",
                            Neighborhood = "Centro",
                            Number = "1054",
                            State = "SP",
                            Bathrooms = "2",
                            Bedrooms = "3",
                            Description = "Excelente casa, localizada em um excelente lugar, 2 banheiros sendo 1 suite, tres quartos, sala, cozinha e garagem que cabe 3 carros tranquilamente",
                            OwnerId = "9f97f8e2-3e2f-4bf6-8d4d-2dcd7a4220a3",
                            Price = 1200.0
                        });
                });

            modelBuilder.Entity("BackEndASP.Entities.Owner", b =>
                {
                    b.HasBaseType("User");

                    b.HasDiscriminator().HasValue("Owner");

                    b.HasData(
                        new
                        {
                            Id = "9f97f8e2-3e2f-4bf6-8d4d-2dcd7a4220a3",
                            AccessFailedCount = 0,
                            BirthDate = new DateTimeOffset(new DateTime(2024, 4, 12, 12, 33, 57, 958, DateTimeKind.Unspecified).AddTicks(5423), new TimeSpan(0, -3, 0, 0, 0)),
                            ConcurrencyStamp = "25181ce8-5ab6-4294-a307-f6f9fedde347",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 4, 12, 15, 33, 57, 891, DateTimeKind.Unspecified).AddTicks(3628), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "owner@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OWNER@GMAIL.COM",
                            NormalizedUserName = "OWNER",
                            PasswordHash = "AQAAAAIAAYagAAAAEDLf5f1NADW7QqVgBvqN5KDaFxc2AbMHewhO6giBYjspeuzytiawBranESebdo2VRQ==",
                            PhoneNumber = "999999999",
                            PhoneNumberConfirmed = true,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "20a49c8f-fcf0-4b84-b490-f1eac426eacf",
                            TwoFactorEnabled = false,
                            UserName = "Owner"
                        });
                });

            modelBuilder.Entity("Student", b =>
                {
                    b.HasBaseType("User");

                    b.Property<int?>("CollegeId")
                        .HasColumnType("int");

                    b.Property<string>("Hobbies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PendentsConnectionsId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Personalitys")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CollegeId");

                    b.HasDiscriminator().HasValue("Student");

                    b.HasData(
                        new
                        {
                            Id = "6a9131c2-be9d-461e-a1af-1535072cd2d3",
                            AccessFailedCount = 0,
                            BirthDate = new DateTimeOffset(new DateTime(2024, 4, 12, 12, 33, 58, 38, DateTimeKind.Unspecified).AddTicks(1588), new TimeSpan(0, -3, 0, 0, 0)),
                            ConcurrencyStamp = "2a080e88-7b69-41a7-831f-64dd36b735a6",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 4, 12, 15, 33, 57, 958, DateTimeKind.Unspecified).AddTicks(5719), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "student@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@GMAIL.COM",
                            NormalizedUserName = "STUDENT",
                            PasswordHash = "AQAAAAIAAYagAAAAELRGAVrUt2WGYifxywmMhB0yYsRnFywTTmPV1luBkz9Xx0hD2ApP7psaFkD4Sq98UA==",
                            PhoneNumber = "999999999",
                            PhoneNumberConfirmed = true,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "c316ff5f-52c0-4055-b0ef-ed008470f395",
                            TwoFactorEnabled = false,
                            UserName = "Student",
                            CollegeId = 1,
                            Hobbies = "[]",
                            PendentsConnectionsId = "[]",
                            Personalitys = "[]"
                        },
                        new
                        {
                            Id = "2f426abc-de8e-4a62-8b01-f706a19b2888",
                            AccessFailedCount = 0,
                            BirthDate = new DateTimeOffset(new DateTime(2024, 4, 12, 12, 33, 58, 106, DateTimeKind.Unspecified).AddTicks(44), new TimeSpan(0, -3, 0, 0, 0)),
                            ConcurrencyStamp = "f55c175e-d941-4fbc-9674-a6e9c28318dc",
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 4, 12, 15, 33, 58, 38, DateTimeKind.Unspecified).AddTicks(2217), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "joao@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOAO@GMAIL.COM",
                            NormalizedUserName = "JOAO",
                            PasswordHash = "AQAAAAIAAYagAAAAEIbyardEfKI2URXAEdKH6GcrZlI8E7tETArc/y2xM1H8EYFAPNJjq0/9cYTAZyFoCw==",
                            PhoneNumber = "999999999",
                            PhoneNumberConfirmed = true,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "411459aa-ad58-4b16-88c1-d7cf41e34579",
                            TwoFactorEnabled = false,
                            UserName = "Joao",
                            CollegeId = 1,
                            Hobbies = "[\"League of Legends\",\"Pop\",\"Carros\"]",
                            PendentsConnectionsId = "[]",
                            Personalitys = "[\"Timido\",\"Quieto\",\"Amigavel\"]"
                        });
                });

            modelBuilder.Entity("BackEndASP.Entities.PropertyStudentLikes", b =>
                {
                    b.HasOne("Property", "Property")
                        .WithMany("StudentLikes")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Student", "Student")
                        .WithMany("PropertiesLikes")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BackEndASP.Entities.UserConnection", b =>
                {
                    b.HasOne("Student", "OtherStudent")
                        .WithMany()
                        .HasForeignKey("OtherStudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Student", "Student")
                        .WithMany("Connections")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OtherStudent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BackEndASP.Entities.UserNotifications", b =>
                {
                    b.HasOne("Notification", "Notification")
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", "User")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Image", b =>
                {
                    b.HasOne("Building", "Building")
                        .WithMany("Images")
                        .HasForeignKey("BuildingId");

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("User", b =>
                {
                    b.HasOne("Image", "Image")
                        .WithOne("User")
                        .HasForeignKey("User", "ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Property", b =>
                {
                    b.HasOne("BackEndASP.Entities.Owner", "Owner")
                        .WithMany("Properties")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Student", b =>
                {
                    b.HasOne("College", "College")
                        .WithMany("Students")
                        .HasForeignKey("CollegeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("College");
                });

            modelBuilder.Entity("Building", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Image", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Notification", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("College", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Property", b =>
                {
                    b.Navigation("StudentLikes");
                });

            modelBuilder.Entity("BackEndASP.Entities.Owner", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Student", b =>
                {
                    b.Navigation("Connections");

                    b.Navigation("PropertiesLikes");
                });
#pragma warning restore 612, 618
        }
    }
}
